"""Handle flows as command arguments."""
import typing

from mitmproxy import command
from mitmproxy import ctx
from mitmproxy import flow
from mitmproxy import http
import time

import geopy
from geopy.distance import VincentyDistance

class MyAddon:
    def __init__(self):
        self.num = 0
        self.f1 = {}
        self.f2 = {}

    @command.command("1")
    def addheader(self, flows: typing.Sequence[flow.Flow]) -> None:

        for f in flows:
            if isinstance(f, http.HTTPFlow):
                if f.request.pretty_url.endswith("location"): 
                    #ctx.log.alert(f.request.urlencoded_form)
                    d=f.request.urlencoded_form
                    d['latitude'] = '-25.180123677893057'
                    d['longitude'] = '135.1292411434939'
                    f.request.urlencoded_form = d
                    #ctx.log.alert(f.request.urlencoded_form)
                     
                    self.f1=f
                if 'search' in f.request.pretty_url:
                    #ctx.log.alert(f.request.pretty_url)
                    self.f2=f
        #ctx.log.alert(f1.request.pretty_url)
        #ctx.log.alert(f2.response)
        ctx.master.commands.call("replay.client", [self.f1])
        ctx.master.commands.call("replay.client", [self.f2])
        self.num=self.num+1
        #ctx.log.alert(f2.response)

    def response(self, flow: http.HTTPFlow):
        if 'search' in flow.request.pretty_url and self.num > 0:
            ctx.log.alert(flow.response.text)
            ctx.log.alert(self.f1.request.pretty_url)
            
            # given: lat1, lon1, b = bearing in degrees, d = distance in kilometers

            origin = geopy.Point(lat1, lon1)
            destination = VincentyDistance(kilometers=d).destination(origin, b)
            lat2, lon2 = destination.latitude, destination.longitude

addons = [
    MyAddon()
]